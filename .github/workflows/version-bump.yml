name: PR — Bump manifest version

on:
  pull_request:
    types: [opened, synchronize, reopened, labeled]

permissions:
  contents: write
  pull-requests: write

jobs:
  bump:
    # Skip forks; only bump when PR branch is in this repo
    if: github.event.pull_request.head.repo.full_name == github.repository
    runs-on: ubuntu-latest
    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Bump version in manifest.json (and package.json if present) with Verified commit
        id: bump
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
          BRANCH: ${{ github.head_ref }}
          LABELS: ${{ join(github.event.pull_request.labels.*.name, ',') }}
        run: |
          set -euo pipefail

          # choose bump from labels (default = patch)
          bump="patch"
          case "$LABELS" in
            *release:major*) bump="major" ;;
            *release:minor*) bump="minor" ;;
            *) bump="patch" ;;
          esac

          bump_file () {
            local path="$1"

            # Read file from PR branch; if it doesn't exist, skip.
            if ! json=$(gh api -H "Accept: application/vnd.github+json" \
                    "/repos/$REPO/contents/$path?ref=$BRANCH" 2>/dev/null); then
              echo "skip $path (not found)"; return 0
            fi

            local sha=$(echo "$json" | jq -r .sha)
            local content=$(echo "$json" | jq -r .content | tr -d '\n' | base64 --decode)
            local current=$(echo "$content" | jq -r .version)

            if [[ "$current" == "null" || -z "$current" ]]; then
              echo "skip $path (no .version field)"; return 0
            fi

            IFS='.' read -r MA MI PA <<<"$current"
            case "$bump" in
              major) MA=$((MA+1)); MI=0; PA=0 ;;
              minor) MI=$((MI+1)); PA=0 ;;
              patch) PA=$((PA+1)) ;;
            esac
            local next="${MA}.${MI}.${PA}"

            local updated=$(echo "$content" | jq --arg v "$next" '.version=$v')
            local b64=$(echo "$updated" | base64 -w 0)

            # Use GitHub Contents API so the commit is GitHub-signed (Verified)
            gh api --method PUT -H "Accept: application/vnd.github+json" \
              "/repos/$REPO/contents/$path" \
              -f message="chore: bump $path version to $next" \
              -f content="$b64" \
              -f sha="$sha" \
              -f branch="$BRANCH" >/dev/null

            echo "Bumped $path → $next"
            echo "next=$next" >> "$GITHUB_OUTPUT"
          }

          bump_file manifest.json
          bump_file package.json || true

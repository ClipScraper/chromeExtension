name: Release (GitHub + Chrome Web Store)

on:
  # 1) Build & maybe test-release while a PR is open and commits land on it
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches: [master]

  # 2) Also allow direct pushes to master (e.g. hotfix), with [release] flag
  push:
    branches: [master]

permissions:
  contents: write
  pull-requests: read

env:
  NODE_VERSION: "20"
  ZIP_NAME: extension.zip

# ------------------------------------------------------------
# Utility: common steps via reusable 'composite' like anchors
# ------------------------------------------------------------
jobs:
  # --- A. PR test-release (runs when a commit on the PR contains [test-release]) ---
  pr-test-release:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest
    steps:
      - name: Check PR is from same repo (secrets are unavailable for forks)
        id: same-repo
        run: |
          if [ "${{ github.event.pull_request.head.repo.full_name }}" != "${{ github.repository }}" ]; then
            echo "from_fork=true" >> $GITHUB_OUTPUT
          else
            echo "from_fork=false" >> $GITHUB_OUTPUT
          fi

      - name: Checkout
        uses: actions/checkout@v4

      - name: Detect [test-release] in PR commits
        id: detect
        uses: actions/github-script@v7
        with:
          script: |
            const {owner, repo} = context.repo;
            const number = context.payload.pull_request.number;
            const commits = await github.pulls.listCommits({owner, repo, pull_number: number, per_page: 250});
            const has = commits.data.some(c => /\[test-release\]/i.test(c.commit.message));
            core.setOutput('has_test', has ? 'true' : 'false');

      - name: Stop early if not a test-release or from a fork
        if: steps.detect.outputs.has_test != 'true' || steps.same-repo.outputs.from_fork == 'true'
        run: |
          echo "No [test-release] found in commits OR PR from fork. Skipping."
          exit 0

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install & Build
        run: |
          if [ -f package-lock.json ] || [ -f pnpm-lock.yaml ] || [ -f yarn.lock ]; then
            if [ -f pnpm-lock.yaml ]; then
              corepack enable
              pnpm i --frozen-lockfile
              pnpm build || true
            elif [ -f yarn.lock ]; then
              yarn --frozen-lockfile
              yarn build || true
            else
              npm ci
              npm run build || true
            fi
          fi

      - name: Create ZIP (dist/build/release or repo root with manifest)
        run: |
          set -e
          OUT=""
          for d in dist build release; do
            if [ -d "$d" ]; then OUT="$d"; break; fi
          done
          if [ -z "$OUT" ] && [ -f "manifest.json" ]; then OUT="."; fi
          if [ -z "$OUT" ]; then echo "No build output found. Ensure you have dist/, build/ or release/ (or manifest.json in root)"; exit 1; fi
          rm -f "${{ env.ZIP_NAME }}"
          if [ "$OUT" = "." ]; then
            zip -qr "${{ env.ZIP_NAME }}" \
              manifest.json assets icons src images styles lib vendor \
              -x "node_modules/*" ".git/*" ".github/*" || zip -qr "${{ env.ZIP_NAME }}" manifest.json -x "node_modules/*" ".git/*" ".github/*"
          else
            (cd "$OUT" && zip -qr "../${{ env.ZIP_NAME }}" .)
          fi
          echo "ZIP at $(pwd)/${{ env.ZIP_NAME }}"

      - name: Create GitHub pre-release (test)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: pr-test-${{ github.event.pull_request.number }}-${{ github.run_number }}
          name: PR Test Release #${{ github.event.pull_request.number }} (run ${{ github.run_number }})
          prerelease: true
          generate_release_notes: true
          files: ${{ env.ZIP_NAME }}

      - name: Publish to Chrome Web Store (TEST release)
        # Requires: vars.CWS_EXTENSION_ID, vars.CWS_CLIENT_ID
        #           secrets.CWS_CLIENT_SECRET, secrets.CWS_REFRESH_TOKEN
        uses: browser-actions/release-chrome-extension@v0
        with:
          extension-id: ${{ vars.CWS_EXTENSION_ID }}
          extension-path: ${{ env.ZIP_NAME }}
          oauth-client-id: ${{ vars.CWS_CLIENT_ID }}
          oauth-client-secret: ${{ secrets.CWS_CLIENT_SECRET }}
          oauth-refresh-token: ${{ secrets.CWS_REFRESH_TOKEN }}

  # --- B. Auto-release on PR merge (always GH + Chrome) ---
  pr-merge-release:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install & Build
        run: |
          if [ -f package-lock.json ] || [ -f pnpm-lock.yaml ] || [ -f yarn.lock ]; then
            if [ -f pnpm-lock.yaml ]; then
              corepack enable
              pnpm i --frozen-lockfile
              pnpm build || true
            elif [ -f yarn.lock ]; then
              yarn --frozen-lockfile
              yarn build || true
            else
              npm ci
              npm run build || true
            fi
          fi

      - name: Create ZIP
        run: |
          set -e
          OUT=""
          for d in dist build release; do
            if [ -d "$d" ]; then OUT="$d"; break; fi
          done
          if [ -z "$OUT" ] && [ -f "manifest.json" ]; then OUT="."; fi
          if [ -z "$OUT" ]; then echo "No build output found. Ensure you have dist/, build/ or release/ (or manifest.json in root)"; exit 1; fi
          rm -f "${{ env.ZIP_NAME }}"
          if [ "$OUT" = "." ]; then
            zip -qr "${{ env.ZIP_NAME }}" \
              manifest.json assets icons src images styles lib vendor \
              -x "node_modules/*" ".git/*" ".github/*" || zip -qr "${{ env.ZIP_NAME }}" manifest.json -x "node_modules/*" ".git/*" ".github/*"
          else
            (cd "$OUT" && zip -qr "../${{ env.ZIP_NAME }}" .)
          fi

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: auto-pr-${{ github.event.pull_request.number }}-${{ github.run_number }}
          name: Auto release for PR #${{ github.event.pull_request.number }}
          generate_release_notes: true
          files: ${{ env.ZIP_NAME }}

      - name: Publish to Chrome Web Store
        uses: browser-actions/release-chrome-extension@v0
        with:
          extension-id: ${{ vars.CWS_EXTENSION_ID }}
          extension-path: ${{ env.ZIP_NAME }}
          oauth-client-id: ${{ vars.CWS_CLIENT_ID }}
          oauth-client-secret: ${{ secrets.CWS_CLIENT_SECRET }}
          oauth-refresh-token: ${{ secrets.CWS_REFRESH_TOKEN }}

  # --- C. Push to master with [release] flag (GH + Chrome) ---
  push-release-flag:
    if: github.event_name == 'push' && contains(github.event.head_commit.message, '[release]')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install & Build
        run: |
          if [ -f package-lock.json ] || [ -f pnpm-lock.yaml ] || [ -f yarn.lock ]; then
            if [ -f pnpm-lock.yaml ]; then
              corepack enable
              pnpm i --frozen-lockfile
              pnpm build || true
            elif [ -f yarn.lock ]; then
              yarn --frozen-lockfile
              yarn build || true
            else
              npm ci
              npm run build || true
            fi
          fi

      - name: Create ZIP
        run: |
          set -e
          OUT=""
          for d in dist build release; do
            if [ -d "$d" ]; then OUT="$d"; break; fi
          done
          if [ -z "$OUT" ] && [ -f "manifest.json" ]; then OUT="."; fi
          if [ -z "$OUT" ]; then echo "No build output found. Ensure you have dist/, build/ or release/ (or manifest.json in root)"; exit 1; fi
          rm -f "${{ env.ZIP_NAME }}"
          if [ "$OUT" = "." ]; then
            zip -qr "${{ env.ZIP_NAME }}" \
              manifest.json assets icons src images styles lib vendor \
              -x "node_modules/*" ".git/*" ".github/*" || zip -qr "${{ env.ZIP_NAME }}" manifest.json -x "node_modules/*" ".git/*" ".github/*"
          else
            (cd "$OUT" && zip -qr "../${{ env.ZIP_NAME }}" .)
          fi

      - name: Create GitHub release (flagged)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: flagged-release-${{ github.run_number }}
          name: Flagged [release] â€” run ${{ github.run_number }}
          generate_release_notes: true
          files: ${{ env.ZIP_NAME }}

      - name: Publish to Chrome Web Store (flagged)
        uses: browser-actions/release-chrome-extension@v0
        with:
          extension-id: ${{ vars.CWS_EXTENSION_ID }}
          extension-path: ${{ env.ZIP_NAME }}
          oauth-client-id: ${{ vars.CWS_CLIENT_ID }}
          oauth-client-secret: ${{ secrets.CWS_CLIENT_SECRET }}
          oauth-refresh-token: ${{ secrets.CWS_REFRESH_TOKEN }}
